#!/bin/bash

# Script ƒë·ªÉ build FFmpeg-Kit theo c√°c preset c·ªßa mobile-ffmpeg-master
# S·ª≠ d·ª•ng: ./build-presets.sh [preset_name]
# C√°c preset: min, https, audio, video, full, min-gpl, https-gpl, full-gpl, cmake-safe

# Thi·∫øt l·∫≠p c∆° b·∫£n
export BASEDIR="$(pwd)"

# C√°c options c∆° b·∫£n (t∆∞∆°ng t·ª± mobile-ffmpeg CUSTOM_OPTIONS)
BASIC_OPTIONS="--enable-android-zlib --enable-android-media-codec"

# ƒê·ªãnh nghƒ©a c√°c preset libraries theo mobile-ffmpeg
# GPL Libraries
GPL_LIBS="--enable-libvidstab --enable-x264 --enable-x265 --enable-xvidcore"

# HTTPS Libraries  
HTTPS_LIBS="--enable-gmp --enable-gnutls"

# Audio Libraries (lo·∫°i b·ªè wavpack v√¨ kh√¥ng ƒë∆∞·ª£c support trong ffmpeg-kit)
AUDIO_LIBS="--enable-lame --enable-libilbc --enable-libvorbis --enable-opencore-amr --enable-opus --enable-shine --enable-soxr --enable-speex --enable-twolame --enable-vo-amrwbenc"

# Audio Libraries SAFE (kh√¥ng d√πng CMake) - lo·∫°i b·ªè libilbc, soxr
AUDIO_LIBS_SAFE="--enable-lame --enable-libvorbis --enable-opencore-amr --enable-opus --enable-shine --enable-speex --enable-twolame --enable-vo-amrwbenc"

# Video Libraries
VIDEO_LIBS="--enable-fontconfig --enable-freetype --enable-fribidi --enable-kvazaar --enable-libass --enable-libiconv --enable-libtheora --enable-libvpx --enable-snappy --enable-libwebp"

# Video Libraries SAFE (kh√¥ng d√πng CMake) - lo·∫°i b·ªè snappy, libaom
VIDEO_LIBS_SAFE="--enable-fontconfig --enable-freetype --enable-fribidi --enable-kvazaar --enable-libass --enable-libiconv --enable-libtheora --enable-libvpx --enable-libwebp"

# Full Libraries (t·∫•t c·∫£ non-GPL)
FULL_LIBS="${HTTPS_LIBS} ${AUDIO_LIBS} ${VIDEO_LIBS} --enable-libxml2"

# CMake-Safe Libraries (tr√°nh CMake version conflicts)
# Lo·∫°i b·ªè: libilbc, soxr (audio), snappy, libaom, jpeg (video/image)
CMAKE_SAFE_LIBS="${HTTPS_LIBS} ${AUDIO_LIBS_SAFE} ${VIDEO_LIBS_SAFE} --enable-libxml2"

# Minimal-Safe Libraries (ch·ªâ basic + HTTPS + audio, kh√¥ng c√≥ video)
MINIMAL_SAFE_LIBS="${HTTPS_LIBS} ${AUDIO_LIBS_SAFE}"

# Near-Full Libraries (lo·∫°i b·ªè ch·ªâ gnutls - 25/26 libraries)
NEAR_FULL_LIBS="--enable-gmp ${AUDIO_LIBS} ${VIDEO_LIBS} --enable-libxml2"

show_help() {
    echo "C√°ch s·ª≠ d·ª•ng: $0 [preset_name]"
    echo ""
    echo "C√°c preset c√≥ s·∫µn:"
    echo "  min         - Ch·ªâ c√≥ basic libraries (android-zlib, android-media-codec)"
    echo "  https       - min + gmp + gnutls"
    echo "  audio       - min + t·∫•t c·∫£ audio libraries"  
    echo "  video       - min + t·∫•t c·∫£ video libraries"
    echo "  full        - min + t·∫•t c·∫£ non-GPL libraries"
    echo "  min-gpl     - min + GPL libraries"
    echo "  https-gpl   - https + GPL libraries"
    echo "  full-gpl    - full + GPL libraries"
    echo "  cmake-safe    - t∆∞∆°ng t·ª± full nh∆∞ng lo·∫°i b·ªè libraries d√πng CMake"
    echo "  minimal-safe  - ch·ªâ basic + HTTPS + audio (tr√°nh video dependencies)"
    echo "  near-full     - t·∫•t c·∫£ libraries tr·ª´ gnutls (25/26 = 96% compatibility)"
    echo ""
    echo "L∆∞u √Ω:"
    echo "  - wavpack kh√¥ng ƒë∆∞·ª£c support trong FFmpeg-Kit n√™n ƒë√£ b·ªè kh·ªèi preset audio"
    echo "  - cmake-safe lo·∫°i b·ªè: libilbc, soxr, snappy, libaom, jpeg (do CMake conflicts)"
    echo "  - minimal-safe tr√°nh video libraries ƒë·ªÉ kh√¥ng auto-include image dependencies"
    echo "  - near-full lo·∫°i b·ªè ch·ªâ gnutls (TLS support v·∫´n c√≥ qua Android system)"
    echo ""
    echo "V√≠ d·ª•:"
    echo "  $0 min         # Build preset minimal"
    echo "  $0 audio       # Build preset audio"
    echo "  $0 near-full   # Build 25/26 libraries (recommended!)"
    echo "  $0 cmake-safe  # Build an to√†n, tr√°nh CMake issues"
}

build_preset() {
    local preset=$1
    local build_options="${BASIC_OPTIONS}"
    local gpl_flag=""
    
    echo "üöÄ Building FFmpeg-Kit v·ªõi preset: ${preset}"
    echo "‚è∞ B·∫Øt ƒë·∫ßu l√∫c: $(date)"
    
    case ${preset} in
        "min")
            echo "üì¶ Preset MIN: Ch·ªâ basic libraries"
            # Ch·ªâ c√≥ BASIC_OPTIONS
            ;;
        "https")
            echo "üì¶ Preset HTTPS: Basic + gmp + gnutls"
            build_options="${build_options} ${HTTPS_LIBS}"
            ;;
        "audio")
            echo "üì¶ Preset AUDIO: Basic + t·∫•t c·∫£ audio libraries (kh√¥ng bao g·ªìm wavpack)"
            build_options="${build_options} ${AUDIO_LIBS}"
            ;;
        "video") 
            echo "üì¶ Preset VIDEO: Basic + t·∫•t c·∫£ video libraries"
            build_options="${build_options} ${VIDEO_LIBS}"
            ;;
        "full")
            echo "üì¶ Preset FULL: Basic + t·∫•t c·∫£ non-GPL libraries"
            build_options="${build_options} ${FULL_LIBS}"
            ;;
        "cmake-safe")
            echo "üì¶ Preset CMAKE-SAFE: T∆∞∆°ng t·ª± FULL nh∆∞ng tr√°nh CMake conflicts"
            echo "    üîß Lo·∫°i b·ªè: libilbc, soxr, snappy, libaom (libraries d√πng CMake)"
            echo "    ‚úÖ An to√†n v·ªõi CMake version 4.x"
            build_options="${build_options} ${CMAKE_SAFE_LIBS}"
            ;;
        "min-gpl")
            echo "üì¶ Preset MIN-GPL: Basic + GPL libraries"
            build_options="${build_options} ${GPL_LIBS}"
            gpl_flag="--enable-gpl"
            ;;
        "https-gpl")
            echo "üì¶ Preset HTTPS-GPL: HTTPS + GPL libraries"
            build_options="${build_options} ${HTTPS_LIBS} ${GPL_LIBS}"
            gpl_flag="--enable-gpl"
            ;;
        "full-gpl")
            echo "üì¶ Preset FULL-GPL: FULL + GPL libraries"
            build_options="${build_options} ${FULL_LIBS} ${GPL_LIBS}"
            gpl_flag="--enable-gpl"
            ;;
        "minimal-safe")
            echo "üì¶ Preset MINIMAL-SAFE: Basic + HTTPS + audio safe (kh√¥ng c√≥ video)"
            build_options="${build_options} ${MINIMAL_SAFE_LIBS}"
            ;;
        "near-full")
            echo "üì¶ Preset NEAR-FULL: Basic + t·∫•t c·∫£ libraries (tr·ª´ gnutls)"
            build_options="${build_options} ${NEAR_FULL_LIBS}"
            ;;
        *)
            echo "‚ùå Preset kh√¥ng h·ª£p l·ªá: ${preset}"
            show_help
            exit 1
            ;;
    esac
    
    # Hi·ªÉn th·ªã c·∫•u h√¨nh s·∫Ω build
    echo ""
    echo "üîß C·∫•u h√¨nh build:"
    echo "   Basic options: ${BASIC_OPTIONS}"
    if [[ -n ${gpl_flag} ]]; then
        echo "   GPL enabled: ${gpl_flag}"
    fi
    echo "   Libraries: ${build_options}"
    echo ""
    if [[ "${preset}" == "cmake-safe" ]]; then
        echo "‚úÖ CMake-Safe preset: Tr√°nh ƒë∆∞·ª£c CMake version conflicts"
        echo "   Lo·∫°i b·ªè: libilbc, soxr, snappy, libaom"
    elif [[ "${preset}" == "near-full" ]]; then
        echo "üéØ Near-Full preset: 25/26 libraries (96% mobile-ffmpeg compatibility)"
        echo "   Lo·∫°i b·ªè ch·ªâ: gnutls (TLS v·∫´n c√≥ qua Android system SSL)"
        echo "   Bao g·ªìm: All CMake libraries, audio, video, image processing"
    else
        echo "‚ö†Ô∏è  L∆∞u √Ω: M·ªôt s·ªë libraries t·ª´ mobile-ffmpeg kh√¥ng c√≥ trong FFmpeg-Kit:"
        echo "   - wavpack (ƒë√£ lo·∫°i b·ªè)"
    fi
    echo ""
    
    # Th·ª±c hi·ªán build
    echo "üî® B·∫Øt ƒë·∫ßu build..."
    if [[ -n ${gpl_flag} ]]; then
        ./android.sh ${build_options} ${gpl_flag}
    else
        ./android.sh ${build_options}
    fi
    
    local exit_code=$?
    
    if [ ${exit_code} -eq 0 ]; then
        echo ""
        echo "‚úÖ Build th√†nh c√¥ng v·ªõi preset: ${preset}"
        echo "‚è∞ Ho√†n th√†nh l√∫c: $(date)"
        echo "üìÅ Output s·∫Ω ·ªü trong th∆∞ m·ª•c: prebuilt/"
    else
        echo ""
        echo "‚ùå Build th·∫•t b·∫°i v·ªõi preset: ${preset}"
        echo "üìã Ki·ªÉm tra file build.log ƒë·ªÉ xem chi ti·∫øt l·ªói"
        exit ${exit_code}
    fi
}

# Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
if [[ $# -eq 0 ]]; then
    echo "‚ùå Thi·∫øu tham s·ªë preset"
    show_help
    exit 1
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Ki·ªÉm tra file android.sh c√≥ t·ªìn t·∫°i kh√¥ng
if [[ ! -f "./android.sh" ]]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y file android.sh trong th∆∞ m·ª•c hi·ªán t·∫°i"
    echo "   Vui l√≤ng ch·∫°y script n√†y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa ffmpeg-kit"
    exit 1
fi

# Th·ª±c hi·ªán build
build_preset "$1" 